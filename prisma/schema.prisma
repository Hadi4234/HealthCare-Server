
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // You can also use MySQL or SQLite
  url      = env("DATABASE_URL")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  image     String    @default("https://placehold.co/600x400.png")
  description String?
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  price       Float
  variants    ProductVariant[]
  reviews     Review[]         // A product can have multiple reviews
}

model ProductVariant {
  id        Int       @id @default(autoincrement())
  image     String    @default("https://placehold.co/600x400.png")
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
  colorId   Int
  color     Color     @relation(fields: [colorId], references: [id])
  sizes     SizeVariant[]

  // color will be a color string
  // productVariant can have a price depending on color
  // condition will be like ## if(product.variants.id.price){ product.price === variants.id.price}
}

model SizeVariant {
  id        Int     @id @default(autoincrement())
  sizeId    Int
  size      Size    @relation(fields: [sizeId], references: [id])
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  stock     Int
  price     Float
  // size will be a string not array for multiple sizes , like 40,41,42,43 or s,m,l,xl etc
}

model Color {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  hex   String?
  variants ProductVariant[]
}

model Size {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  sizeVariants SizeVariant[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?       // Nullable for top-level categories
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  products      Product[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(CUSTOMER) // Default role is CUSTOMER
  reviews   Review[]  // A user can write multiple reviews
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Int       // Rating between 1 and 5
  comment   String?
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

enum Role {
  CUSTOMER
  ADMIN
}

